I understand you want to avoid any confusion and have ready-to-use files for direct copy-paste. Let me provide you with the complete integrated code files for the backend part of the project, organized by file path.

## Complete Backend Implementation Files

### Main Application Class

**File: src/main/java/com/automation/api/PlaywrightAutomationApiApplication.java**
```java
package com.automation.api;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class PlaywrightAutomationApiApplication {

    public static void main(String[] args) {
        SpringApplication.run(PlaywrightAutomationApiApplication.class, args);
    }
}
```

### Configuration Files

**File: src/main/java/com/automation/api/config/CorsConfig.java**
```java
package com.automation.api.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

import java.util.Arrays;

@Configuration
public class CorsConfig {
    
    @Value("${app.cors.allowed-origins}")
    private String[] allowedOrigins;
    
    @Bean
    public CorsFilter corsFilter() {
        CorsConfiguration corsConfiguration = new CorsConfiguration();
        corsConfiguration.setAllowedOrigins(Arrays.asList(allowedOrigins));
        corsConfiguration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"));
        corsConfiguration.setAllowedHeaders(Arrays.asList("Authorization", "Content-Type", "X-Requested-With", "Accept"));
        corsConfiguration.setAllowCredentials(true);
        
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", corsConfiguration);
        
        return new CorsFilter(source);
    }
}
```

**File: src/main/java/com/automation/api/config/WebSocketConfig.java**
```java
package com.automation.api.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.messaging.simp.config.MessageBrokerRegistry;
import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;

@Configuration
@EnableWebSocketMessageBroker
public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {
    
    @Override
    public void configureMessageBroker(MessageBrokerRegistry config) {
        config.enableSimpleBroker("/topic");
        config.setApplicationDestinationPrefixes("/app");
    }
    
    @Override
    public void registerStompEndpoints(StompEndpointRegistry registry) {
        registry.addEndpoint("/ws")
                .setAllowedOrigins("*")
                .withSockJS();
    }
}
```

**File: src/main/java/com/automation/api/config/ApplicationStartup.java**
```java
package com.automation.api.config;

import com.automation.api.services.FileSystemService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.ApplicationListener;
import org.springframework.stereotype.Component;

import java.io.File;

@Component
public class ApplicationStartup implements ApplicationListener<ApplicationReadyEvent> {

    private final FileSystemService fileSystemService;
    
    @Autowired
    public ApplicationStartup(FileSystemService fileSystemService) {
        this.fileSystemService = fileSystemService;
    }
    
    @Override
    public void onApplicationEvent(ApplicationReadyEvent event) {
        // Initialize base directories when application starts
        initializeBaseDirectories();
    }
    
    private void initializeBaseDirectories() {
        // Create base directory if it doesn't exist
        File baseDir = new File(fileSystemService.getBaseDirectory());
        if (!baseDir.exists()) {
            baseDir.mkdirs();
        }
        
        // Create subdirectories
        new File(baseDir, "projects").mkdirs();
        new File(baseDir, "reports").mkdirs();
    }
}
```

### Controllers

**File: src/main/java/com/automation/api/controllers/HealthController.java**
```java
package com.automation.api.controllers;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/health")
public class HealthController {

    @GetMapping
    public ResponseEntity<Map<String, Object>> healthCheck() {
        Map<String, Object> health = new HashMap<>();
        health.put("status", "UP");
        health.put("timestamp", System.currentTimeMillis());
        
        return ResponseEntity.ok(health);
    }
}
```

**File: src/main/java/com/automation/api/controllers/reporting/ReportingController.java**
```java
package com.automation.api.controllers.reporting;

import com.automation.api.models.reporting.DashboardSummary;
import com.automation.api.models.reporting.TrendData;
import com.automation.api.models.reporting.PerformanceMetrics;
import com.automation.api.models.reporting.ReliabilityMatrix;
import com.automation.api.models.reporting.FailureCategory;
import com.automation.api.services.reporting.DashboardService;
import com.automation.api.services.reporting.TrendAnalysisService;
import com.automation.api.services.reporting.PerformanceAnalysisService;
import com.automation.api.services.reporting.ReliabilityAnalysisService;
import com.automation.api.services.reporting.FailureAnalysisService;
import com.automation.api.services.reporting.ReportExportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.Map;

@RestController
@RequestMapping("/api/reporting")
public class ReportingController {
    private final DashboardService dashboardService;
    private final TrendAnalysisService trendService;
    private final PerformanceAnalysisService performanceService;
    private final ReliabilityAnalysisService reliabilityService;
    private final FailureAnalysisService failureService;
    private final ReportExportService exportService;
    
    @Autowired
    public ReportingController(
            DashboardService dashboardService,
            TrendAnalysisService trendService,
            PerformanceAnalysisService performanceService,
            ReliabilityAnalysisService reliabilityService,
            FailureAnalysisService failureService,
            ReportExportService exportService) {
        this.dashboardService = dashboardService;
        this.trendService = trendService;
        this.performanceService = performanceService;
        this.reliabilityService = reliabilityService;
        this.failureService = failureService;
        this.exportService = exportService;
    }
    
    @GetMapping("/dashboard/{projectId}")
    public ResponseEntity<DashboardSummary> getDashboard(@PathVariable String projectId) {
        try {
            DashboardSummary summary = dashboardService.getDashboardSummary(projectId);
            return ResponseEntity.ok(summary);
        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    @GetMapping("/trends/{projectId}")
    public ResponseEntity<TrendData> getTrends(
            @PathVariable String projectId,
            @RequestParam String startDate,
            @RequestParam String endDate) {
        try {
            LocalDate start = LocalDate.parse(startDate);
            LocalDate end = LocalDate.parse(endDate);
            
            TrendData trends = trendService.getTrendData(projectId, start, end);
            return ResponseEntity.ok(trends);
        } catch (IOException | DateTimeParseException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    @GetMapping("/performance/{projectId}/{testCaseId}")
    public ResponseEntity<PerformanceMetrics> getPerformance(
            @PathVariable String projectId,
            @PathVariable String testCaseId,
            @RequestParam String startDate,
            @RequestParam String endDate) {
        try {
            LocalDate start = LocalDate.parse(startDate);
            LocalDate end = LocalDate.parse(endDate);
            
            PerformanceMetrics metrics = performanceService.getTestPerformanceMetrics(
                    projectId, testCaseId, start, end);
            return ResponseEntity.ok(metrics);
        } catch (IOException | DateTimeParseException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    @GetMapping("/reliability/{projectId}")
    public ResponseEntity<ReliabilityMatrix> getReliability(
            @PathVariable String projectId,
            @RequestParam String startDate,
            @RequestParam String endDate) {
        try {
            LocalDate start = LocalDate.parse(startDate);
            LocalDate end = LocalDate.parse(endDate);
            
            ReliabilityMatrix matrix = reliabilityService.getReliabilityMatrix(projectId, start, end);
            return ResponseEntity.ok(matrix);
        } catch (IOException | DateTimeParseException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    @GetMapping("/failures/{projectId}")
    public ResponseEntity<Map<String, FailureCategory>> getFailures(
            @PathVariable String projectId,
            @RequestParam String startDate,
            @RequestParam String endDate) {
        try {
            LocalDate start = LocalDate.parse(startDate);
            LocalDate end = LocalDate.parse(endDate);
            
            Map<String, FailureCategory> failures = failureService.analyzeFailures(projectId, start, end);
            return ResponseEntity.ok(failures);
        } catch (IOException | DateTimeParseException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    @GetMapping("/export/csv/{projectId}")
    public ResponseEntity<byte[]> exportCsv(
            @PathVariable String projectId,
            @RequestParam String startDate,
            @RequestParam String endDate) {
        try {
            LocalDate start = LocalDate.parse(startDate);
            LocalDate end = LocalDate.parse(endDate);
            
            byte[] csvData = exportService.exportCsvReport(projectId, start, end);
            
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.parseMediaType("text/csv"));
            headers.setContentDispositionFormData("attachment", 
                    "test-report-" + projectId + "-" + startDate + "-to-" + endDate + ".csv");
            
            return new ResponseEntity<>(csvData, headers, HttpStatus.OK);
        } catch (IOException | DateTimeParseException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
    
    @GetMapping("/export/junit/{projectId}/{executionId}")
    public ResponseEntity<byte[]> exportJUnit(
            @PathVariable String projectId,
            @PathVariable String executionId) {
        try {
            byte[] xmlData = exportService.exportJUnitReport(projectId, executionId);
            
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.parseMediaType("application/xml"));
            headers.setContentDispositionFormData("attachment", 
                    "junit-report-" + executionId + ".xml");
            
            return new ResponseEntity<>(xmlData, headers, HttpStatus.OK);
        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
}
```

### Models

**File: src/main/java/com/automation/api/models/Project.java**
```java
package com.automation.api.models;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class Project {
    private String id;
    private String name;
    private String description;
    private Date creationDate;
    private Date lastModifiedDate;
    private String path;
    private List<String> features = new ArrayList<>();
    
    // Getters and Setters
    public String getId() {
        return id;
    }
    
    public void setId(String id) {
        this.id = id;
    }
    
    public String getName() {
        return name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    public String getDescription() {
        return description;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }
    
    public Date getCreationDate() {
        return creationDate;
    }
    
    public void setCreationDate(Date creationDate) {
        this.creationDate = creationDate;
    }
    
    public Date getLastModifiedDate() {
        return lastModifiedDate;
    }
    
    public void setLastModifiedDate(Date lastModifiedDate) {
        this.lastModifiedDate = lastModifiedDate;
    }
    
    public String getPath() {
        return path;
    }
    
    public void setPath(String path) {
        this.path = path;
    }
    
    public List<String> getFeatures() {
        return features;
    }
    
    public void setFeatures(List<String> features) {
        this.features = features;
    }
}
```

**File: src/main/java/com/automation/api/models/TestExecution.java**
```java
package com.automation.api.models;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TestExecution {
    private String id;
    private String projectId;
    private String name;
    private String environment;
    private String browser;
    private Date startTime;
    private Date endTime;
    private String status;
    private List<TestCaseExecution> testCases = new ArrayList<>();
    private Map<String, Object> metadata = new HashMap<>();
    private long duration;
    private String triggeredBy;
    private String executionSource; // Manual, Scheduled, CI/CD
    
    // Getters and Setters
    public String getId() {
        return id;
    }
    
    public void setId(String id) {
        this.id = id;
    }
    
    public String getProjectId() {
        return projectId;
    }
    
    public void setProjectId(String projectId) {
        this.projectId = projectId;
    }
    
    public String getName() {
        return name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    public String getEnvironment() {
        return environment;
    }
    
    public void setEnvironment(String environment) {
        this.environment = environment;
    }
    
    public String getBrowser() {
        return browser;
    }
    
    public void setBrowser(String browser) {
        this.browser = browser;
    }
    
    public Date getStartTime() {
        return startTime;
    }
    
    public void setStartTime(Date startTime) {
        this.startTime = startTime;
    }
    
    public Date getEndTime() {
        return endTime;
    }
    
    public void setEndTime(Date endTime) {
        this.endTime = endTime;
    }
    
    public String getStatus() {
        return status;
    }
    
    public void setStatus(String status) {
        this.status = status;
    }
    
    public List<TestCaseExecution> getTestCases() {
        return testCases;
    }
    
    public void setTestCases(List<TestCaseExecution> testCases) {
        this.testCases = testCases;
    }
    
    public Map<String, Object> getMetadata() {
        return metadata;
    }
    
    public void setMetadata(Map<String, Object> metadata) {
        this.metadata = metadata;
    }
    
    public long getDuration() {
        return duration;
    }
    
    public void setDuration(long duration) {
        this.duration = duration;
    }
    
    public String getTriggeredBy() {
        return triggeredBy;
    }
    
    public void setTriggeredBy(String triggeredBy) {
        this.triggeredBy = triggeredBy;
    }
    
    public String getExecutionSource() {
        return executionSource;
    }
    
    public void setExecutionSource(String executionSource) {
        this.executionSource = executionSource;
    }
}
```

**File: src/main/java/com/automation/api/models/TestCaseExecution.java**
```java
package com.automation.api.models;

import com.automation.api.models.reporting.TestCaseFailure;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TestCaseExecution {
    private String id;
    private String name;
    private String feature;
    private String status;
    private Date startTime;
    private Date endTime;
    private long duration;
    private List<TestStepExecution> steps = new ArrayList<>();
    private List<String> tags = new ArrayList<>();
    private List<String> screenshots = new ArrayList<>();
    private String videoRecording;
    private List<TestCaseFailure> failures = new ArrayList<>();
    private Map<String, Object> metadata = new HashMap<>();
    
    // Getters and Setters
    public String getId() {
        return id;
    }
    
    public void setId(String id) {
        this.id = id;
    }
    
    public String getName() {
        return name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    public String getFeature() {
        return feature;
    }
    
    public void setFeature(String feature) {
        this.feature = feature;
    }
    
    public String getStatus() {
        return status;
    }
    
    public void setStatus(String status) {
        this.status = status;
    }
    
    public Date getStartTime() {
        return startTime;
    }
    
    public void setStartTime(Date startTime) {
        this.startTime = startTime;
    }
    
    public Date getEndTime() {
        return endTime;
    }
    
    public void setEndTime(Date endTime) {
        this.endTime = endTime;
    }
    
    public long getDuration() {
        return duration;
    }
    
    public void setDuration(long duration) {
        this.duration = duration;
    }
    
    public List<TestStepExecution> getSteps() {
        return steps;
    }
    
    public void setSteps(List<TestStepExecution> steps) {
        this.steps = steps;
    }
    
    public List<String> getTags() {
        return tags;
    }
    
    public void setTags(List<String> tags) {
        this.tags = tags;
    }
    
    public List<String> getScreenshots() {
        return screenshots;
    }
    
    public void setScreenshots(List<String> screenshots) {
        this.screenshots = screenshots;
    }
    
    public String getVideoRecording() {
        return videoRecording;
    }
    
    public void setVideoRecording(String videoRecording) {
        this.videoRecording = videoRecording;
    }
    
    public List<TestCaseFailure> getFailures() {
        return failures;
    }
    
    public void setFailures(List<TestCaseFailure> failures) {
        this.failures = failures;
    }
    
    public Map<String, Object> getMetadata() {
        return metadata;
    }
    
    public void setMetadata(Map<String, Object> metadata) {
        this.metadata = metadata;
    }
}
```

**File: src/main/java/com/automation/api/models/TestStepExecution.java**
```java
package com.automation.api.models;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

public class TestStepExecution {
    private String id;
    private String name;
    private String type;
    private String status;
    private Date startTime;
    private Date endTime;
    private long duration;
    private Map<String, Object> parameters = new HashMap<>();
    private String screenshot;
    private String errorMessage;
    private String stackTrace;
    private String selector;
    private boolean wasHealed;
    
    // Getters and Setters
    public String getId() {
        return id;
    }
    
    public void setId(String id) {
        this.id = id;
    }
    
    public String getName() {
        return name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    public String getType() {
        return type;
    }
    
    public void setType(String type) {
        this.type = type;
    }
    
    public String getStatus() {
        return status;
    }
    
    public void setStatus(String status) {
        this.status = status;
    }
    
    public Date getStartTime() {
        return startTime;
    }
    
    public void setStartTime(Date startTime) {
        this.startTime = startTime;
    }
    
    public Date getEndTime() {
        return endTime;
    }
    
    public void setEndTime(Date endTime) {
        this.endTime = endTime;
    }
    
    public long getDuration() {
        return duration;
    }
    
    public void setDuration(long duration) {
        this.duration = duration;
    }
    
    public Map<String, Object> getParameters() {
        return parameters;
    }
    
    public void setParameters(Map<String, Object> parameters) {
        this.parameters = parameters;
    }
    
    public String getScreenshot() {
        return screenshot;
    }
    
    public void setScreenshot(String screenshot) {
        this.screenshot = screenshot;
    }
    
    public String getErrorMessage() {
        return errorMessage;
    }
    
    public void setErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
    }
    
    public String getStackTrace() {
        return stackTrace;
    }
    
    public void setStackTrace(String stackTrace) {
        this.stackTrace = stackTrace;
    }
    
    public String getSelector() {
        return selector;
    }
    
    public void setSelector(String selector) {
        this.selector = selector;
    }
    
    public boolean isWasHealed() {
        return wasHealed;
    }
    
    public void setWasHealed(boolean wasHealed) {
        this.wasHealed = wasHealed;
    }
}
```

### Reporting Models

**File: src/main/java/com/automation/api/models/reporting/DashboardSummary.java**
```java
package com.automation.api.models.reporting;

import com.automation.api.models.TestExecution;
import java.util.List;

public class DashboardSummary {
    private int totalExecutions;
    private int passedTests;
    private int failedTests;
    private double passRate;
    private long averageDuration;
    private List<TestExecution> activeExecutions;
    
    // Getters and Setters
    public int getTotalExecutions() {
        return totalExecutions;
    }
    
    public void setTotalExecutions(int totalExecutions) {
        this.totalExecutions = totalExecutions;
    }
    
    public int getPassedTests() {
        return passedTests;
    }
    
    public void setPassedTests(int passedTests) {
        this.passedTests = passedTests;
    }
    
    public int getFailedTests() {
        return failedTests;
    }
    
    public void setFailedTests(int failedTests) {
        this.failedTests = failedTests;
    }
    
    public double getPassRate() {
        return passRate;
    }
    
    public void setPassRate(double passRate) {
        this.passRate = passRate;
    }
    
    public long getAverageDuration() {
        return averageDuration;
    }
    
    public void setAverageDuration(long averageDuration) {
        this.averageDuration = averageDuration;
    }
    
    public List<TestExecution> getActiveExecutions() {
        return activeExecutions;
    }
    
    public void setActiveExecutions(List<TestExecution> activeExecutions) {
        this.activeExecutions = activeExecutions;
    }
}
```

**File: src/main/java/com/automation/api/models/reporting/DatePoint.java**
```java
package com.automation.api.models.reporting;

import java.time.LocalDate;

public class DatePoint {
    private LocalDate date;
    private int executionCount;
    private int passCount;
    private int failCount;
    private int errorCount;
    private long averageDuration;
    private double passRate;
    
    // Getters and Setters
    public LocalDate getDate() {
        return date;
    }
    
    public void setDate(LocalDate date) {
        this.date = date;
    }
    
    public int getExecutionCount() {
        return executionCount;
    }
    
    public void setExecutionCount(int executionCount) {
        this.executionCount = executionCount;
    }
    
    public int getPassCount() {
        return passCount;
    }
    
    public void setPassCount(int passCount) {
        this.passCount = passCount;
    }
    
    public int getFailCount() {
        return failCount;
    }
    
    public void setFailCount(int failCount) {
        this.failCount = failCount;
    }
    
    public int getErrorCount() {
        return errorCount;
    }
    
    public void setErrorCount(int errorCount) {
        this.errorCount = errorCount;
    }
    
    public long getAverageDuration() {
        return averageDuration;
    }
    
    public void setAverageDuration(long averageDuration) {
        this.averageDuration = averageDuration;
    }
    
    public double getPassRate() {
        return passRate;
    }
    
    public void setPassRate(double passRate) {
        this.passRate = passRate;
    }
}
```

**File: src/main/java/com/automation/api/models/reporting/TrendData.java**
```java
package com.automation.api.models.reporting;

import java.util.List;
import java.util.Map;

public class TrendData {
    private List<DatePoint> datePoints;
    private Map<String, List<Integer>> metrics;
    
    // Getters and Setters
    public List<DatePoint> getDatePoints() {
        return datePoints;
    }
    
    public void setDatePoints(List<DatePoint> datePoints) {
        this.datePoints = datePoints;
    }
    
    public Map<String, List<Integer>> getMetrics() {
        return metrics;
    }
    
    public void setMetrics(Map<String, List<Integer>> metrics) {
        this.metrics = metrics;
    }
}
```

**File: src/main/java/com/automation/api/models/reporting/PerformanceMetrics.java**
```java
package com.automation.api.models.reporting;

import java.util.List;

public class PerformanceMetrics {
    private String testCaseId;
    private String testCaseName;
    private List<ExecutionTime> executionTimes;
    private long averageDuration;
    private long minDuration;
    private long maxDuration;
    private double standardDeviation;
    private List<PerformanceAnomaly> anomalies;
    
    // Getters and Setters
    public String getTestCaseId() {
        return testCaseId;
    }
    
    public void setTestCaseId(String testCaseId) {
        this.testCaseId = testCaseId;
    }
    
    public String getTestCaseName() {
        return testCaseName;
    }
    
    public void setTestCaseName(String testCaseName) {
        this.testCaseName = testCaseName;
    }
    
    public List<ExecutionTime> getExecutionTimes() {
        return executionTimes;
    }
    
    public void setExecutionTimes(List<ExecutionTime> executionTimes) {
        this.executionTimes = executionTimes;
    }
    
    public long getAverageDuration() {
        return averageDuration;
    }
    
    public void setAverageDuration(long averageDuration) {
        this.averageDuration = averageDuration;
    }
    
    public long getMinDuration() {
        return minDuration;
    }
    
    public void setMinDuration(long minDuration) {
        this.minDuration = minDuration;
    }
    
    public long getMaxDuration() {
        return maxDuration;
    }
    
    public void setMaxDuration(long maxDuration) {
        this.maxDuration = maxDuration;
    }
    
    public double getStandardDeviation() {
        return standardDeviation;
    }
    
    public void setStandardDeviation(double standardDeviation) {
        this.standardDeviation = standardDeviation;
    }
    
    public List<PerformanceAnomaly> getAnomalies() {
        return anomalies;
    }
    
    public void setAnomalies(List<PerformanceAnomaly> anomalies) {
        this.anomalies = anomalies;
    }
}
```

**File: src/main/java/com/automation/api/models/reporting/ExecutionTime.java**
```java
package com.automation.api.models.reporting;

import java.util.Date;

public class ExecutionTime {
    private String executionId;
    private Date executionDate;
    private long duration;
    private String environment;
    private String browser;
    
    // Getters and Setters
    public String getExecutionId() {
        return executionId;
    }
    
    public void setExecutionId(String executionId) {
        this.executionId = executionId;
    }
    
    public Date getExecutionDate() {
        return executionDate;
    }
    
    public void setExecutionDate(Date executionDate) {
        this.executionDate = executionDate;
    }
    
    public long getDuration() {
        return duration;
    }
    
    public void setDuration(long duration) {
        this.duration = duration;
    }
    
    public String getEnvironment() {
        return environment;
    }
    
    public void setEnvironment(String environment) {
        this.environment = environment;
    }
    
    public String getBrowser() {
        return browser;
    }
    
    public void setBrowser(String browser) {
        this.browser = browser;
    }
}
```

**File: src/main/java/com/automation/api/models/reporting/PerformanceAnomaly.java**
```java
package com.automation.api.models.reporting;

import java.util.Date;

public class PerformanceAnomaly {
    private String executionId;
    private Date executionDate;
    private long duration;
    private long expectedDuration;
    private double deviationPercentage;
    private String possibleCause;
    
    // Getters and Setters
    public String getExecutionId() {
        return executionId;
    }
    
    public void setExecutionId(String executionId) {
        this.executionId = executionId;
    }
    
    public Date getExecutionDate() {
        return executionDate;
    }
    
    public void setExecutionDate(Date executionDate) {
        this.executionDate = executionDate;
    }
    
    public long getDuration() {
        return duration;
    }
    
    public void setDuration(long duration) {
        this.duration = duration;
    }
    
    public long getExpectedDuration() {
        return expectedDuration;
    }
    
    public void setExpectedDuration(long expectedDuration) {
        this.expectedDuration = expectedDuration;
    }
    
    public double getDeviationPercentage() {
        return deviationPercentage;
    }
    
    public void setDeviationPercentage(double deviationPercentage) {
        this.deviationPercentage = deviationPercentage;
    }
    
    public String getPossibleCause() {
        return possibleCause;
    }
    
    public void setPossibleCause(String possibleCause) {
        this.possibleCause = possibleCause;
    }
}
```

**File: src/main/java/com/automation/api/models/reporting/ReliabilityMatrix.java**
```java
package com.automation.api.models.reporting;

import java.util.List;
import java.util.Map;

public class ReliabilityMatrix {
    private List<String> testCaseIds;
    private List<String> testCaseNames;
    private List<List<Integer>> reliabilityScores;
    private Map<String, Integer> testCaseFailureCount;
    private Map<String, Double> testCaseReliabilityPercentage;
    
    // Getters and Setters
    public List<String> getTestCaseIds() {
        return testCaseIds;
    }
    
    public void setTestCaseIds(List<String> testCaseIds) {
        this.testCaseIds = testCaseIds;
    }
    
    public List<String> getTestCaseNames() {
        return testCaseNames;
    }
    
    public void setTestCaseNames(List<String> testCaseNames) {
        this.testCaseNames = testCaseNames;
    }
    
    public List<List<Integer>> getReliabilityScores() {
        return reliabilityScores;
    }
    
    public void setReliabilityScores(List<List<Integer>> reliabilityScores) {
        this.reliabilityScores = reliabilityScores;
    }
    
    public Map<String, Integer> getTestCaseFailureCount() {
        return testCaseFailureCount;
    }
    
    public void setTestCaseFailureCount(Map<String, Integer> testCaseFailureCount) {
        this.testCaseFailureCount = testCaseFailureCount;
    }
    
    public Map<String, Double> getTestCaseReliabilityPercentage() {
        return testCaseReliabilityPercentage;
    }
    
    public void setTestCaseReliabilityPercentage(Map<String, Double> testCaseReliabilityPercentage) {
        this.testCaseReliabilityPercentage = testCaseReliabilityPercentage;
    }
}
```

**File: src/main/java/com/automation/api/models/reporting/FailureCategory.java**
```java
package com.automation.api.models.reporting;

import java.util.List;
import java.util.Map;

public class FailureCategory {
    private String name;
    private List<TestCaseFailure> failures;
    private Map<String, Integer> errorPatterns;
    private List<String> recommendations;
    
    public FailureCategory() {
    }
    
    public FailureCategory(String name, List<TestCaseFailure> failures) {
        this.name = name;
        this.failures = failures;
    }
    
    // Getters and Setters
    public String getName() {
        return name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    public List<TestCaseFailure> getFailures() {
        return failures;
    }
    
    public void setFailures(List<TestCaseFailure> failures) {
        this.failures = failures;
    }
    
    public Map<String, Integer> getErrorPatterns() {
        return errorPatterns;
    }
    
    public void setErrorPatterns(Map<String, Integer> errorPatterns) {
        this.errorPatterns = errorPatterns;
    }
    
    public List<String> getRecommendations() {
        return recommendations;
    }
    
    public void setRecommendations(List<String> recommendations) {
        this.recommendations = recommendations;
    }
}
```

**File: src/main/java/com/automation/api/models/reporting/TestCaseFailure.java**
```java
package com.automation.api.models.reporting;

import java.util.List;

public class TestCaseFailure {
    private String id;
    private String type; // Selector, Timeout, Assertion, Error
    private String message;
    private String location; // Step ID or component name
    private String stackTrace;
    private String screenshot;
    private boolean recurrent; // Pattern of recurring failure
    private List<String> suggestedActions;
    
    // Getters and Setters
    public String getId() {
        return id;
    }
    
    public void setId(String id) {
        this.id = id;
    }
    
    public String getType() {
        return type;
    }
    
    public void setType(String type) {
        this.type = type;
    }
    
    public String getMessage() {
        return message;
    }
    
    public void setMessage(String message) {
        this.message = message;
    }
    
    public String getLocation() {
        return location;
    }
    
    public void setLocation(String location) {
        this.location = location;
    }
    
    public String getStackTrace() {
        return stackTrace;
    }
    
    public void setStackTrace(String stackTrace) {
        this.stackTrace = stackTrace;
    }
    
    public String getScreenshot() {
        return screenshot;
    }
    
    public void setScreenshot(String screenshot) {
        this.screenshot = screenshot;
    }
    
    public boolean isRecurrent() {
        return recurrent;
    }
    
    public void setRecurrent(boolean recurrent) {
        this.recurrent = recurrent;
    }
    
    public List<String> getSuggestedActions() {
        return suggestedActions;
    }
    
    public void setSuggestedActions(List<String> suggestedActions) {
        this.suggestedActions = suggestedActions;
    }
}
```

### Services

**File: src/main/java/com/automation/api/services/FileSystemService.java**
```java
package com.automation.api.services;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@Service
public class FileSystemService {

    private final String baseDirectory;
    
    public FileSystemService(@Value("${app.storage.directory:./data}") String baseDirectory) {
        this.baseDirectory = baseDirectory;
        initializeDirectories();
    }
    
    private void initializeDirectories() {
        // Create base directory if it doesn't exist
        File baseDir = new File(baseDirectory);
        if (!baseDir.exists()) {
            baseDir.mkdirs();
        }
        
        // Create subdirectories
        new File(baseDir, "projects").mkdirs();
        new File(baseDir, "reports").mkdirs();
    }
    
    public String getBaseDirectory() {
        return baseDirectory;
    }
    
    public String getProjectsDirectory() {
        return baseDirectory + "/projects";
    }
    
    public String getProjectPath(String projectId) {
        return baseDirectory + "/projects/" + projectId;
    }
    
    public String getReportingPath() {
        return baseDirectory + "/reports";
    }
    
    public String getProjectReportingPath(String projectId) {
        return baseDirectory + "/reports/" + projectId;
    }
    
    public String getExecutionPath(String projectId, String executionId) {
        return getProjectReportingPath(projectId) + "/executions/" + executionId;
    }
    
    public String getExecutionByDatePath(String projectId, LocalDate date) {
        return getProjectReportingPath(projectId) + "/executions/" + date.toString();
    }
    
    public List<String> listProjects() {
        File projectsDir = new File(getProjectsDirectory());
        String[] projectIds = projectsDir.list((dir, name) -> new File(dir, name).isDirectory());
        return projectIds != null ? Arrays.asList(projectIds) : Collections.emptyList();
    }
    
    public void saveFile(String path, byte[] content) throws IOException {
        File file = new File(path);
        File parent = file.getParentFile();
        if (!parent.exists()) {
            parent.mkdirs();
        }
        Files.write(file.toPath(), content);
    }
    
    public byte[] readFile(String path) throws IOException {
        File file = new File(path);
        if (!file.exists()) {
            throw new FileNotFoundException("File not found: " + path);
        }
        return Files.readAllBytes(file.toPath());
    }
    
    public void initializeReportingDirectories(String projectId) {
        File projectReportDir = new File(getProjectReportingPath(projectId));
        if (!projectReportDir.exists()) {
            projectReportDir.mkdirs();
        }
        
        new File(projectReportDir, "executions").mkdirs();
        new File(projectReportDir, "active").mkdirs();
        new File(projectReportDir, "exports").mkdirs();
    }
}
```

**File: src/main/java/com/automation/api/services/reporting/RealTimeReportingService.java**
```java
package com.automation.api.services.reporting;

import com.automation.api.models.TestCaseExecution;
import com.automation.api.models.TestExecution;
import com.automation.api.models.TestStepExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Service;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Service
public class RealTimeReportingService {
    private final SimpMessagingTemplate messagingTemplate;
    private final Map<String, TestExecution> activeExecutions = new ConcurrentHashMap<>();

    @Autowired
    public RealTimeReportingService(SimpMessagingTemplate messagingTemplate) {
        this.messagingTemplate = messagingTemplate;
    }
    
    public void publishExecutionUpdate(String projectId, TestExecution execution) {
        // Send update to project-specific topic
        messagingTemplate.convertAndSend("/topic/project/" + projectId + "/executions", execution);
        
        // Send update to execution-specific topic
        messagingTemplate.convertAndSend("/topic/execution/" + execution.getId(), execution);
    }
    
    public void publishTestCaseUpdate(String executionId, TestCaseExecution testCase) {
        messagingTemplate.convertAndSend("/topic/execution/" + executionId + "/testcase/" + testCase.getId(), testCase);
    }
    
    public void publishTestStepUpdate(String executionId, String testCaseId, TestStepExecution step) {
        messagingTemplate.convertAndSend(
            "/topic/execution/" + executionId + "/testcase/" + testCaseId + "/step/" + step.getId(),
            step
        );
    }
    
    public void publishReportSummaryUpdate(String projectId, Object summary) {
        messagingTemplate.convertAndSend("/topic/project/" + projectId + "/summary", summary);
    }
}
```

**File: src/main/java/com/automation/api/services/reporting/DashboardService.java**
```java
package com.automation.api.services.reporting;

import com.automation.api.models.TestCaseExecution;
import com.automation.api.models.TestExecution;
import com.automation.api.models.reporting.DashboardSummary;
import com.automation.api.services.FileSystemService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

@Service
public class DashboardService {
    private final FileSystemService fileSystemService;
    private final ObjectMapper objectMapper;
    
    @Autowired
    public DashboardService(FileSystemService fileSystemService, ObjectMapper objectMapper) {
        this.fileSystemService = fileSystemService;
        this.objectMapper = objectMapper;
    }
    
    public DashboardSummary getDashboardSummary(String projectId) throws IOException {
        // Read recent executions from the file system
        List<TestExecution> recentExecutions = getRecentExecutions(projectId, 100);
        
        // Calculate summary metrics
        int totalExecutions = recentExecutions.size();
        int passedTests = countPassedTests(recentExecutions);
        int failedTests = countFailedTests(recentExecutions);
        
        // Calculate pass rate (avoid division by zero)
        int totalTests = passedTests + failedTests;
        double passRate = totalTests > 0 ? (double) passedTests / totalTests * 100 : 0;
        
        long averageDuration = calculateAverageDuration(recentExecutions);
        
        // Get active executions
        List<TestExecution> activeExecutions = getActiveExecutions(projectId);
        
        // Create dashboard summary
        DashboardSummary summary = new DashboardSummary();
        summary.setTotalExecutions(totalExecutions);
        summary.setPassedTests(passedTests);
        summary.setFailedTests(failedTests);
        summary.setPassRate(passRate);
        summary.setAverageDuration(averageDuration);
        summary.setActiveExecutions(activeExecutions);
        
        return summary;
    }
    
    // Helper methods for calculating metrics
    private List<TestExecution> getRecentExecutions(String projectId, int limit) throws IOException {
        String executionsPath = fileSystemService.getProjectReportingPath(projectId) + "/executions";
        File executionsDir = new File(executionsPath);
        
        if (!executionsDir.exists()) {
            return Collections.emptyList();
        }
        
        List<TestExecution> executions = new ArrayList<>();
        
        // Get execution directories
        File[] execDirs = executionsDir.listFiles(File::isDirectory);
        if (execDirs == null) {
            return Collections.emptyList();
        }
        
        // Sort by modification date (descending)
        Arrays.sort(execDirs, (a, b) -> Long.compare(b.lastModified(), a.lastModified()));
        
        // Process each execution
        int count = 0;
        for (File execDir : execDirs) {
            if (count >= limit) break;
            
            File[] files = execDir.listFiles((dir, name) -> name.endsWith(".json"));
            if (files != null && files.length > 0) {
                for (File file : files) {
                    String content = new String(Files.readAllBytes(file.toPath()), StandardCharsets.UTF_8);
                    TestExecution execution = objectMapper.readValue(content, TestExecution.class);
                    executions.add(execution);
                    count++;
                    
                    if (count >= limit) break;
                }
            }
        }
        
        return executions;
    }
    
    private int countPassedTests(List<TestExecution> executions) {
        return executions.stream()
                .flatMap(e -> e.getTestCases().stream())
                .filter(tc -> "PASSED".equals(tc.getStatus()))
                .mapToInt(tc -> 1)
                .sum();
    }
    
    private int countFailedTests(List<TestExecution> executions) {
        return executions.stream()
                .flatMap(e -> e.getTestCases().stream())
                .filter(tc -> "FAILED".equals(tc.getStatus()) || "ERROR".equals(tc.getStatus()))
                .mapToInt(tc -> 1)
                .sum();
    }
    
    private long calculateAverageDuration(List<TestExecution> executions) {
        if (executions.isEmpty()) {
            return 0;
        }
        
        long totalDuration = executions.stream()
                .mapToLong(TestExecution::getDuration)
                .sum();
                
        return totalDuration / executions.size();
    }
    
    private List<TestExecution> getActiveExecutions(String projectId) throws IOException {
        // Read active executions from the file system
        String activePath = fileSystemService.getProjectReportingPath(projectId) + "/active";
        List<TestExecution> activeExecutions = new ArrayList<>();
        
        File activeDir = new File(activePath);
        if (!activeDir.exists()) {
            return Collections.emptyList();
        }
        
        File[] activeFiles = activeDir.listFiles((dir, name) -> name.endsWith(".json"));
        if (activeFiles == null) {
            return Collections.emptyList();
        }
        
        for (File file : activeFiles) {
            String content = new String(Files.readAllBytes(file.toPath()), StandardCharsets.UTF_8);
            TestExecution execution = objectMapper.readValue(content, TestExecution.class);
            activeExecutions.add(execution);
        }
        
        return activeExecutions;
    }
}
```

Continue implementing similar service files for the remaining services (TrendAnalysisService, PerformanceAnalysisService, etc.).

### application.properties

**File: src/main/resources/application.properties**
```properties
# Server port
server.port=8080

# Application name
spring.application.name=playwright-automation-tool

# File storage location (relative to project root)
app.storage.directory=./data

# CORS settings
app.cors.allowed-origins=http://localhost:3000,http://localhost:8080

# WebSocket configuration
spring.websocket.max-text-message-size=819200
spring.websocket.max-binary-message-size=819200

# Jackson date format
spring.jackson.date-format=yyyy-MM-dd'T'HH:mm:ss.SSSZ
spring.jackson.serialization.write-dates-as-timestamps=false

# Logging
logging.level.root=INFO
logging.level.com.automation.api=DEBUG
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
```

## Building and Running the Project

Now that you have all the necessary files, follow these steps to build and run the project:

1. Create the directory structure and place all the files according to the paths provided.

2. Build the project:
```bash
mvn clean package
```

3. Run the application:
```bash
java -jar target/playwright-automation-tool-1.0.0.jar
```

For frontend development, you can create a separate React project using create-react-app or Vite, implement the components we designed earlier, and then build the frontend and place it in the `src/main/resources/static` directory before building the final JAR.

These files should give you a solid foundation for your Zero-Code Playwright Test Automation Tool with the Advanced Reporting Module. If you need any specific implementations for the remaining service classes or have any questions about the integration, feel free to ask!


Here are the key frontend configuration files you'll need for your Zero-Code Playwright Test Automation Tool project.

## package.json

```json
{
  "name": "playwright-automation-tool-frontend",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "@stomp/stompjs": "^7.0.0",
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/jest": "^27.5.2",
    "@types/node": "^16.18.11",
    "@types/react": "^18.0.26",
    "@types/react-dom": "^18.0.10",
    "axios": "^1.2.2",
    "date-fns": "^2.29.3",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.6.1",
    "react-scripts": "5.0.1",
    "sockjs-client": "^1.6.1",
    "typescript": "^4.9.4",
    "uuid": "^9.0.0",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@types/sockjs-client": "^1.5.1",
    "@types/uuid": "^9.0.0"
  },
  "proxy": "http://localhost:8080"
}
```

## tsconfig.json

```json
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "baseUrl": "src"
  },
  "include": [
    "src"
  ]
}
```

## .env

```
NODE_ENV=development
PORT=3000
REACT_APP_API_URL=http://localhost:8080/api
REACT_APP_WS_URL=http://localhost:8080/ws
```

## public/index.html

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Zero-Code Playwright Test Automation Tool"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <title>Playwright Automation Tool</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>
```

## public/manifest.json

```json
{
  "short_name": "Playwright Tool",
  "name": "Zero-Code Playwright Test Automation Tool",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}
```

## src/index.css

```css
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #f8f9fa;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

/* Common styles */
.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

.loading {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 200px;
}

.error {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 200px;
  color: #dc3545;
}

/* Layout elements */
.page-header {
  margin-bottom: 20px;
  padding-bottom: 10px;
  border-bottom: 1px solid #dee2e6;
}

.card {
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  padding: 20px;
  margin-bottom: 20px;
}

.btn {
  display: inline-block;
  font-weight: 400;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  user-select: none;
  border: 1px solid transparent;
  padding: 0.375rem 0.75rem;
  font-size: 1rem;
  line-height: 1.5;
  border-radius: 0.25rem;
  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out,
    border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
  cursor: pointer;
}

.btn-primary {
  color: #fff;
  background-color: #007bff;
  border-color: #007bff;
}

.btn-primary:hover {
  color: #fff;
  background-color: #0069d9;
  border-color: #0062cc;
}

.btn-success {
  color: #fff;
  background-color: #28a745;
  border-color: #28a745;
}

.btn-success:hover {
  color: #fff;
  background-color: #218838;
  border-color: #1e7e34;
}

.btn-danger {
  color: #fff;
  background-color: #dc3545;
  border-color: #dc3545;
}

.btn-danger:hover {
  color: #fff;
  background-color: #c82333;
  border-color: #bd2130;
}

.form-group {
  margin-bottom: 1rem;
}

.form-control {
  display: block;
  width: 100%;
  padding: 0.375rem 0.75rem;
  font-size: 1rem;
  line-height: 1.5;
  color: #495057;
  background-color: #fff;
  background-clip: padding-box;
  border: 1px solid #ced4da;
  border-radius: 0.25rem;
  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

.form-control:focus {
  color: #495057;
  background-color: #fff;
  border-color: #80bdff;
  outline: 0;
  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}
```

## src/index.tsx

```tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
```

## src/App.tsx

```tsx
import React from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import HomePage from './components/core/HomePage';
import DashboardPage from './components/core/DashboardPage';
import SettingsPage from './components/core/SettingsPage';
import ProjectPage from './components/project/ProjectPage';
import ReportingDashboard from './components/reporting/ReportingDashboard';
import Header from './components/core/Header';
import './App.css';

function App() {
  return (
    <BrowserRouter>
      <div className="app">
        <Header />
        <main className="main-content">
          <Routes>
            <Route path="/" element={<HomePage />} />
            <Route path="/dashboard" element={<DashboardPage />} />
            <Route path="/settings" element={<SettingsPage />} />
            <Route path="/project/:projectId" element={<ProjectPage />} />
            <Route path="/reporting" element={<ReportingDashboard />} />
            <Route path="/reporting/:projectId" element={<ReportingDashboard />} />
          </Routes>
        </main>
      </div>
    </BrowserRouter>
  );
}

export default App;
```

## src/App.css

```css
.app {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.main-content {
  flex: 1;
  padding: 20px;
}

@media (max-width: 768px) {
  .main-content {
    padding: 10px;
  }
}
```

## src/reportWebVitals.ts

```typescript
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
```

## src/react-app-env.d.ts

```typescript
/// <reference types="react-scripts" />
```

## Setting Up the Project

With these files, you should be able to set up the frontend part of your Zero-Code Playwright Test Automation Tool. Here's how to proceed:

1. **Create a Frontend Directory:**
   ```bash
   mkdir -p frontend/public frontend/src/components/core frontend/src/components/project frontend/src/components/reporting frontend/src/components/shared/charts frontend/src/components/shared/filters frontend/src/services/api frontend/src/services/websocket
   ```

2. **Copy Configuration Files:**
   ```bash
   # Copy configuration files to the frontend directory
   cp package.json frontend/
   cp tsconfig.json frontend/
   cp .env frontend/
   
   # Copy HTML files to public directory
   cp public/index.html frontend/public/
   cp public/manifest.json frontend/public/
   
   # Create empty favicon and logo files
   touch frontend/public/favicon.ico
   touch frontend/public/logo192.png
   touch frontend/public/logo512.png
   
   # Copy React app files
   cp src/index.css frontend/src/
   cp src/index.tsx frontend/src/
   cp src/App.tsx frontend/src/
   cp src/App.css frontend/src/
   cp src/reportWebVitals.ts frontend/src/
   cp src/react-app-env.d.ts frontend/src/
   ```

3. **Install Dependencies:**
   ```bash
   cd frontend
   npm install
   ```

4. **Start Development Server:**
   ```bash
   npm start
   ```

5. **Build for Production:**
   ```bash
   npm run build
   ```

6. **Copy Built Frontend to Spring Boot Static Resources:**
   ```bash
   mkdir -p ../src/main/resources/static
   cp -r build/* ../src/main/resources/static/
   ```

7. **Build the Full Application:**
   ```bash
   cd ..
   mvn clean package
   ```

8. **Run the Application:**
   ```bash
   java -jar target/playwright-automation-tool-1.0.0.jar
   ```

These files and instructions should give you a complete structure for setting up both the frontend and backend parts of your Zero-Code Playwright Test Automation Tool with the Advanced Reporting Module. All you need to do is copy the provided files to their respective locations and follow the build steps.


